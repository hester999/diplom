function sendPayload() {
    let payload = document.getElementById("payload").value;

    // –£–¥–∞–ª—è–µ–º <script> —Ç–µ–≥–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if (payload.startsWith('<script>') && payload.endsWith('</script>')) {
        payload = payload.slice(8, -9);
    }

    fetch("/xss/lvl1", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ payload: payload })
    })
    .then(response => response.json())
    .then(data => {
        if (data.payload) {
            document.getElementById("output").innerHTML = "–í–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!";
            setTimeout(executeXSS, 1000); // –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
        } else {
            document.getElementById("output").innerHTML = "–û—à–∏–±–∫–∞: " + data.error;
        }
    })
    .catch(error => {
        console.error("–û—à–∏–±–∫–∞ –≤ sendPayload:", error);
    });
}

function executeXSS() {
    fetch('/xss/lvl1/payload')
    .then(response => response.json())
    .then(data => {
        if (data.payload) {
            console.log("–ü–æ–ª—É—á–µ–Ω–Ω—ã–π –ø–µ–π–ª–æ–∞–¥:", data.payload); // –û—Ç–ª–∞–¥–∫–∞ –≤ –∫–æ–Ω—Å–æ–ª–∏
            let cleanPayload = data.payload;

            // –£–¥–∞–ª—è–µ–º <script> —Ç–µ–≥–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            if (cleanPayload.startsWith('<script>') && cleanPayload.endsWith('</script>')) {
                cleanPayload = cleanPayload.slice(8, -9);
            }

            try {
                // –°–æ–∑–¥–∞—ë–º div –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
                let comments = document.getElementById("comments");
                let newComment = document.createElement("div");
                newComment.classList.add("comment");

                // –°–æ–∑–¥–∞—ë–º script-—ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è XSS
                let script = document.createElement("script");
                script.textContent = cleanPayload;

                // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å XSS
                newComment.innerHTML = `<strong>üë§ –ê–Ω–æ–Ω–∏–º:</strong> ${data.payload}`;

                document.body.appendChild(script);
                comments.appendChild(newComment);

                // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è XSS
                fetch("/xss/lvl1/log", {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ success: true, payload: data.payload })
                });
            } catch (error) {
                console.error("–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è XSS:", error);
            }
        }
    })
    .catch(error => {
        console.error("–û—à–∏–±–∫–∞ –≤ executeXSS:", error);
    });
}


function checkCookie() {
    let userInput = document.getElementById("cookie-input").value.trim();
    let correctCookie = "xss_vulnerable=hacked_cookie"; // –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ

    let output = document.getElementById("cookie-output");

    if (userInput === correctCookie) {
        output.innerHTML = "‚úÖ –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à—ë–Ω! –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ Level 2...";
        output.style.color = "green";

        // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ lvl2 —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
            window.location.href = "/xss/lvl2";
        }, 2000);
    } else {
        output.innerHTML = "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –∫—É–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.";
        output.style.color = "red";
    }
}
